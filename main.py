import telebot
import config
import random
from telebot import types
import datetime

import requests
from bs4 import BeautifulSoup
import re


session = requests.Session()

response = session.post(config.url, data=config.data, headers=config.header).text


journal_response = session.get(config.journal, headers=config.header).text

cookies_dict = [
    {"domain": key.domain, "name": key.name, "path": key.path, "value": key.value}
    for key in session.cookies
]

session2 = requests.Session()

for cookies in cookies_dict:
    session2.cookies.set(**cookies)

dirt_resp = session2.get(config.journal, headers=config.header).text

soup = BeautifulSoup(dirt_resp, 'lxml')
block = soup.find('div', class_='layout-inner__content')
all_hw = str(block.findAll('div', class_='dnevnik-lesson'))

next_week_dirt = session2.get(config.journal_next, headers=config.header).text
soup2 = BeautifulSoup(next_week_dirt, 'lxml')
block = soup2.find('div', class_='layout-inner__content')
hw_next = str(block.findAll('div', class_='dnevnik-lesson'))

soup3 = BeautifulSoup(''.join(map(str, all_hw)), 'html.parser')
hw_text = soup3.get_text()
hw_text = ' '.join(hw_text.split())
hw_text = hw_text.replace('[', '').replace(']', '')

soup4 = BeautifulSoup(''.join(map(str, hw_next)), 'html.parser')
hw_next = soup4.get_text()
hw_next = ' '.join(hw_next.split())
hw_next = hw_next.replace('[', '').replace(']', '')



start_index = hw_text.find('1. 08:00‚Äì08:40')
end_index = hw_text.find('1. 08:00‚Äì08:40', start_index + 1)


if start_index != -1 and end_index != -1:
    hw_monday = hw_text[:end_index]



second_occurrence = hw_text.find(', 1. 08:00‚Äì08:40')
third_occurrence = hw_text.find(', 1. 08:00‚Äì08:40', second_occurrence + 1)


if second_occurrence != -1 and third_occurrence != -1:
    hw_tuesday = hw_text[second_occurrence + len(', 1. 08:00‚Äì08:40'):third_occurrence]


pattern = re.compile(r'(?:.*?08:00‚Äì08:40.*?){3}(.*?08:00‚Äì08:40)')


matches = re.findall(pattern, hw_text)


hw_wednesday = matches[0] if matches else ''



pattern = re.compile(r'(?:.*?08:00‚Äì08:40.*?){4}(.*?08:00‚Äì08:40)')


matches = re.findall(pattern, hw_text)


hw_thursday = matches[0] if matches else ''


pattern = re.compile(r'(?:.*?08:00‚Äì08:40.*?){5}(.*)')


matches = re.findall(pattern, hw_text)


hw_friday = matches[0] if matches else ''








pattern = re.compile(r'\d\. 08:00‚Äì08:40(.*?)\d\. 08:00‚Äì08:40', re.DOTALL)
matches = re.findall(pattern, hw_next)


hw_monday_next = matches[0] if len(matches) > 0 else ''

second_occurrence = hw_next.find(', 1. 08:00‚Äì08:40')
third_occurrence = hw_next.find(', 1. 08:00‚Äì08:40', second_occurrence + 1)

if second_occurrence != -1 and third_occurrence != -1:
    hw_next_tuesday = hw_next[second_occurrence + len(', 1. 08:00‚Äì08:40'):third_occurrence]




today_date = datetime.date.today()


day_of_week = today_date.weekday()


days_of_week_list = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

current_day_of_week = days_of_week_list[day_of_week]


bot = telebot.TeleBot(config.TOKEN)
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("üé≤ –†–∞–∑–Ω–æ–µ")
item2 = types.KeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –î–ó")
item3 = types.KeyboardButton("ü§ì –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è")
markup.add(item1, item2, item3)

print('–ë–û–¢ –ó–ê–ü–£–©–ï–ù')


@bot.message_handler(commands=['start'])
def privet(message):
    user_id_telegram = message.from_user.id
    if user_id_telegram in config.whitelist:
        sti = open('static/welcome.webp', 'rb')
        bot.send_sticker(message.chat.id, sti)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>–±–æ—Ç</b>, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç\n<b><a href='https://github.com/Evgenchick4434'>üçÄEvgenchick4434üçÄ</a></b>\n \n‚úÖ <i>–í—ã –µ—Å—Ç—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.</i>".format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –í–∞—Å –Ω–µ—Ç—É –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –æ–Ω –Ω–µ –¥–ª—è –≤–∞—Å...")


@bot.message_handler(content_types=['text'])
def otvet(message):
    if message.chat.id in config.whitelist:
        if message.chat.type == 'private':
            if message.text == 'üé≤ –†–∞–∑–Ω–æ–µ':
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üò± –û—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏", callback_data='history')
                item2 = types.InlineKeyboardButton("üìí –£—á–µ–±–Ω–∏–∫", callback_data='studbook')

                markup.add(item1, item2)

                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", reply_markup=markup)
            elif message.text == "üìö –ü–æ–ª—É—á–∏—Ç—å –î–ó":

                markup = types.InlineKeyboardMarkup(row_width=2)
                item0 = types.InlineKeyboardButton("üìñ –ù–ê –ó–ê–í–¢–†–ê", callback_data='tomorrow')
                item1 = types.InlineKeyboardButton("üò° –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data='monday')
                item2 = types.InlineKeyboardButton("üò† –í—Ç–æ—Ä–Ω–∏–∫", callback_data='tuesday')
                item3 = types.InlineKeyboardButton("üôÑ –°—Ä–µ–¥–∞", callback_data='wednesday')
                item4 = types.InlineKeyboardButton("üòè –ß–µ—Ç–≤–µ—Ä–≥", callback_data='thursday')
                item5 = types.InlineKeyboardButton("üòç –ü—è—Ç–Ω–∏—Ü–∞", callback_data='friday')

                markup.add(item0, item1, item2, item3, item4, item5)

                bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b>".format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
            elif message.text == "ü§ì –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è":

                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üò° –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data='monday_next')
                item2 = types.InlineKeyboardButton("üò† –í—Ç–æ—Ä–Ω–∏–∫", callback_data='tuesday_next')

                markup.add(item1, item2)

                bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å c–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏:</b>\n<i>–î—Ä—É–≥–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–∑–∂–µ, —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º –±–∞–≥–æ–º.</i>".format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
            elif message.text == "/about":
                bot.send_message(message.chat.id, "<i>üêç <u>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏</u>:\n<b>Evgenchick4434</b> - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –¥–∏–∑–∞–π–Ω–µ—Ä.</i>\n<i><b>ChatGPT</b> - –ü—Ä–∞–≤–∫–∞ –∫–æ–¥–∞, —Ç—ã–∫–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–∞ –Ω–æ—Å–æ–º –≤ –æ—à–∏–±–∫–∏.</i>\n \n<b><a href='https://github.com/Evgenchick4434'>üìÅ –ú–æ–π Github —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</a></b>\n<b>ü™≤ –ù–∞—à–ª–∏ –±–∞–≥? –°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É</b> <i>evgenchickart@mail.ru</i>\n<b><a href='https://www.donationalerts.com/r/evgenchick4434/'>‚òï –ö—É–ø–∏—Ç—å –º–Ω–µ –∫–æ—Ñ–µ</a></b>\n\n<i>–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω <b>—Å –Ω—É–ª—è</b> –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <b>Python</b> –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É <b>pyTelegramBotAPI</b>. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ –Ω–∞ GitHub, –Ω–æ –±–µ–∑ –º–æ–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≠–ª–ñ—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –º–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –≤—ã—Ç–∞—â–∏—Ç—å –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.</i>".format(message.from_user, bot.get_me()), parse_mode='html')
            elif message.text == "/help":
                no_neg_video = open('static/guys.mp4', 'rb')
                bot.send_video(message.chat.id, no_neg_video)
                bot.send_message(message.chat.id, "–í–æ–æ–±—â–µ, <b>—Å–ø–∞—Å–µ–Ω–∏–µ —É—Ç–æ–ø–∞—é—â–∏—Ö - –¥–µ–ª–æ —Ä—É–∫ —Å–∞–º–∏—Ö —É—Ç–æ–ø–∞—é—â–∏—Ö</b>.\n–ù–æ —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å - –¥–∞–º –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫—É - –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª—Å.\n\n<b>–ï–°–õ–ò –ü–†–û–ü–ê–õ–ê –ö–õ–ê–í–ò–ê–¢–£–†–ê</b> - /start".format(message.from_user, bot.get_me()), parse_mode='html')
            elif message.text == "/admin":
                trash = open('static/trash.mp4', 'rb')
                bot.send_video(message.chat.id, trash)
                bot.send_message(message.chat.id, "üò±üò±üò± –í—Å—ë, —Ç—ã –≤–∑–ª–æ–º–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞.")
            elif message.text == "/whitelist_add":
                if message.chat.id in config.admin_list:
                    def whitelist_adding(message):
                        chat_id = message.chat.id
                        new_whitelist_member = message.text
                        try:
                            config.whitelist_add(new_whitelist_member)
                            bot.send_message(chat_id, f'‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª {new_whitelist_member} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫!')
                        except:
                            bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:")
                    bot.register_next_step_handler(message, whitelist_adding)
                else:
                    bot.send_message(message.chat.id, "üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è –≤–∞—Å")
#           elif message.text == "/broadcast":
#               if message.chat.id in config.admin_list:
#                   def broadcast(message):
#                       for user_id in config.whitelist:
#                           bot.send_message(user_id, message)
#                   bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
#                   bot.register_next_step_handler(message, broadcast)
#               else:
#                   bot.send_message(message.chat.id, "üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è –≤–∞—Å")
            else:
                bot.send_message(message.chat.id, '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start')
    else:
        bot.send_message(message.chat.id, "‚ùå –í–∞—Å –Ω–µ—Ç—É –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –æ–Ω –Ω–µ –¥–ª—è –≤–∞—Å...")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'monday':
                if current_day_of_week == 'monday':
                    bot.send_message(call.message.chat.id, hw_monday)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î/–ó –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:", reply_markup=None)
                else:
                    bot.send_message(call.message.chat.id, "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            elif call.data == 'tuesday':
                if current_day_of_week == 'monday' or current_day_of_week == 'tuesday':
                    bot.send_message(call.message.chat.id, hw_tuesday)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î/–ó –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:", reply_markup=None)
                else:
                    bot.send_message(call.message.chat.id, "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            elif call.data == 'wednesday':
                if current_day_of_week == 'monday' or current_day_of_week == 'tuesday' or current_day_of_week == 'wednesday':
                    bot.send_message(call.message.chat.id, hw_wednesday)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î/–ó –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:", reply_markup=None)
                else:
                    bot.send_message(call.message.chat.id, "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            elif call.data == 'thursday':
                if current_day_of_week == 'monday' or current_day_of_week == 'tuesday' or current_day_of_week == 'wednesday' or current_day_of_week == 'thursday':
                    bot.send_message(call.message.chat.id, hw_thursday)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î/–ó –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:", reply_markup=None)
                else:
                    bot.send_message(call.message.chat.id, "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            elif call.data == 'friday':
                if current_day_of_week == 'monday' or current_day_of_week == 'tuesday' or current_day_of_week == 'wednesday' or current_day_of_week == 'thursday' or current_day_of_week == 'friday':
                    bot.send_message(call.message.chat.id, hw_friday)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –î/–ó –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:", reply_markup=None)
                else:
                    bot.send_message(call.message.chat.id, "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            elif call.data == 'history':
                history_mark = random.randint(2, 5)
                bot.send_message(call.message.chat.id, f"üîÆ –¢–≤–æ—è —Å–ª–µ–¥—É—é—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ - <b>{history_mark}</b>".format(call.from_user, bot.get_me()), parse_mode='html')
            elif call.data == 'studbook':
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚åõ –í—ã–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
                studbook_file = open('static/studbook.txt', 'rb')
                bot.send_document(call.message.chat.id, studbook_file)
            elif call.data == 'monday_next':
                bot.send_message(call.message.chat.id, hw_monday_next)
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
            elif call.data == 'tuesday_next':
                bot.send_message(call.message.chat.id, hw_next_tuesday)
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
            elif call.data == 'wednesday_next':
                bot.send_message(call.message.chat.id, '–í –†–ê–ó–†–ê–ë–û–¢–ö–ï')
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
            elif call.data == 'thursday_next':
                bot.send_message(call.message.chat.id, '–í –†–ê–ó–†–ê–ë–û–¢–ö–ï')
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
            elif call.data == 'friday_next':
                bot.send_message(call.message.chat.id, '–í –†–ê–ó–†–ê–ë–û–¢–ö–ï')
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–£—Å–ø–µ—à–Ω–æ")
            elif call.data == 'tomorrow':
                if current_day_of_week == 'monday':
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î/–ó –Ω–∞ –í–¢–û–†–ù–ò–ö")
                    bot.send_message(call.message.chat.id, hw_tuesday)
                if current_day_of_week == 'tuesday':
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î/–ó –Ω–∞ C–†–ï–î–£")
                    bot.send_message(call.message.chat.id, hw_wednesday)
                if current_day_of_week == 'wednesday':
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î/–ó –Ω–∞ –ß–ï–¢–í–ï–†–ì")
                    bot.send_message(call.message.chat.id, hw_thursday)
                if current_day_of_week == 'thursday':
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î/–ó –Ω–∞ –ü–Ø–¢–ù–ò–¶–£")
                    bot.send_message(call.message.chat.id, hw_friday)
                if current_day_of_week == 'friday' or current_day_of_week == 'saturday' or current_day_of_week == 'sunday':
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–î/–ó –Ω–∞ –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö")
                    bot.send_message(call.message.chat.id, hw_monday)


    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
